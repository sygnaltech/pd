{
  "version": 3,
  "sources": ["../../src/page/clinic.ts"],
  "sourcesContent": ["\r\n/*\r\n * SITE \r\n * Page | Clinic \r\n * \r\n */\r\n\r\n// import { TocFix } from \"../tocfix\";\r\n// import Plyr from 'plyr';\r\n// // import QRCode from 'qrcode';\r\n// import { AdjustTrackingUrl } from \"../adjust\";\r\n// import { AdjustTrackingQr } from \"../adjust-qr\";\r\nimport { IModule, Page } from \"@sygnal/sse\";\r\n\r\n//const url: string = 'https://www.sygnal.com?thisisatrackingurlthsfdsfsdsdatdoesstuff';\r\n\r\n\r\nexport class ClinicPage implements IModule {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    setup() {\r\n        \r\n    }\r\n    \r\n    exec() {\r\n\r\n        /**\r\n         * Fix links for the ToC \r\n         */\r\n\r\n        // let tocFix = new TocFix();\r\n        // tocFix.init(); \r\n\r\n//         window['fsAttributes'] = window['fsAttributes'] || [];\r\n//         window['fsAttributes'].push([\r\n//           'toc',\r\n//           (tableInstances) => {\r\n\r\n//             tocFix.addToCCloseLinks();\r\n\r\n// //            console.log('toc Successfully loaded!');\r\n//           },\r\n//         ]);\r\n\r\n//         /**\r\n//          * Wire up components embedded\r\n//          * in Finsweet PRT RTB's\r\n//          */\r\n\r\n//         window['fsAttributes'] = window['fsAttributes'] || []; \r\n//         window['fsAttributes'].push([  \r\n//           'richtext',   \r\n//           (textInstances) => {   \r\n\r\n//             this.initAfterFsPRTLib();\r\n// //            console.log('richtext Successfully loaded!');      \r\n//           },   \r\n//         ]);    \r\n\r\n\r\n        // // Look for all links with a [code] attribute\r\n        // // and apply it to the link's querystring as ?code=VALUE. \r\n\r\n        // // Get all links with the 'code' attribute\r\n        // const links: NodeListOf<HTMLAnchorElement> = document.querySelectorAll('a[code]');\r\n\r\n        // links.forEach((link: HTMLAnchorElement) => {\r\n        //     // Get the value of the 'code' attribute\r\n        //     const codeValue: string = link.getAttribute('code') || '';\r\n\r\n        //     // Use the URL interface to handle the href\r\n        //     const url: URL = new URL(link.href);\r\n            \r\n        //     // Use URLSearchParams to set the code parameter\r\n        //     url.searchParams.set('code', codeValue);\r\n\r\n        //     // Update the link href\r\n        //     link.href = url.toString();\r\n        // });\r\n                    \r\n    }\r\n\r\n}  \r\n\r\n    \r\n    \r\n    \r\n    "],
  "mappings": ";;;AAiBO,MAAM,aAAN,MAAoC;AAAA,IAEvC,cAAc;AAAA,IACd;AAAA,IAEA,QAAQ;AAAA,IAER;AAAA,IAEA,OAAO;AAAA,IAwDP;AAAA,EAEJ;",
  "names": []
}
